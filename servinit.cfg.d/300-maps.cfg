// Prevent list from being interpreted
//
//   /myalias = [ @quot [@arg1 @arg2 @arg3] ]
//   /echo (myalias 1 2 3)
//   1 2 3
quote = concat

// Create a comparator from less (<, <f, <s) operator.
//
//   /cmp = (mkcmp <)
//   /echo (cmp 1 1)
//   0
//   /echo (cmp 0 1)
//   -1
//   /echo (cmp 1 0)
//   1
mkcmp = [ @quote [? (@arg1 $arg1 $arg2) -1 (? (@arg1 $arg2 $arg1) 1 0)] ]

// Predicate to check if list is empty
listempty = [ ? (= (listlen $arg1) 0) 1 0 ]

// Remove duplicates from a list. Does not preserve order.
// First argument is less (<, <f, <s) operator.
nub = [
  local cmp
  local unique
  local prev
  cmp = (mkcmp $arg1)
  unique = []
  looplist elem (sortlist $arg2 a b [= (cmp $a $b) -1]) [
    if ((!= (cmp $elem $prev) 0)) [
      if (listempty $unique) [
        unique = $elem
      ] [
        unique = (concat $unique $elem)
      ]
    ]
    prev = $elem
  ]
  @quote $unique
]

// Set union for lists.
// First argument is less (<, <f, <s) operator.
//
//   /echo (listadd <s "abuse abuse train" "train wet wet" "wet sand sand")
//   abuse sand train wet
listadd = [
  local all
  all = $arg2
  loop i (- $numargs 2) [ all = (concat $all $[arg@(+ $i 3)]) ]
  nub $arg1 $all
]

// new maps
maps.ctf = [echo2k forge fourplex]
maps.dac = [echo2k forge fourplex]
maps.king = [echo2k forge fourplex]
maps.bb = [echo2k forge fourplex]
maps.hold = [echo2k forge fourplex]
maps.duel = [echo2k forge train foggyforest sand]
maps.multi = [train]
maps.small = [echo2k train sand]
maps.medium = [forge foggyforest fourplex]

maps.all = (listadd <s $maps.ctf $maps.dac $maps.king $maps.bb $maps.hold $maps.duel $maps.multi $maps.small $maps.medium)

sv_mainmaps (listadd <s $sv_mainmaps $maps.all)
sv_allowmaps (listadd <s $sv_allowmaps $maps.all)
sv_capturemaps (listadd <s $sv_capturemaps $maps.ctf)
sv_defendmaps (listadd <s $sv_defendmaps $maps.dac)
sv_kingmaps (listadd <s $sv_kingmaps $maps.king)
sv_bombermaps (listadd <s $sv_bombermaps $maps.bb)
sv_holdmaps (listadd <s $sv_holdmaps $maps.hold)
sv_duelmaps (listadd <s $sv_duelmaps $maps.duel)
sv_multimaps (listadd <s $sv_multimaps $maps.multi)
sv_smallmaps (listadd <s $sv_smallmaps $maps.small)
sv_mediummaps (listadd <s $sv_mediummaps $maps.medium)
